async getItemsDetails(asins: string[]): Promise<AmazonProduct[]> {
  const settings = await this.getApiSettings();
  const results: AmazonProduct[] = [];

  // 1) Pull from cache first
  const uncachedAsins: string[] = [];
  for (const asin of asins) {
    const cached = await storage.getProductDetails(asin);
    if (cached) {
      results.push(cached as AmazonProduct);
    } else {
      uncachedAsins.push(asin);
    }
  }

  // 2) Only fetch the uncached ones, in batches
  const batchSize = 10;
  for (let i = 0; i < uncachedAsins.length; i += batchSize) {
    const batch = uncachedAsins.slice(i, i + batchSize);

    // build your payload exactly as before, but using `batch`
    const payload = {
      ItemIds: batch,
      /* ...Resources, PartnerTag, etc... */
    };

    const response = await this.signedAmazonRequest(
      "paapi5/getitems",
      payload,
      settings,
    );
    if (!response.ok) {
      console.error(`GetItems failed for ${batch.join(", ")}`, await response.text());
      continue;
    }

    const json = await response.json();
    const items = json.ItemsResult?.Items || [];

    for (const item of items) {
      const offer = item.Offers?.Listings?.[0] || {};
      const prod: AmazonProduct = {
        asin: item.ASIN,
        title: item.ItemInfo?.Title?.DisplayValue ?? "",
        description: (item.ItemInfo?.Features?.DisplayValues ?? []).join("; "),
        imageUrl: item.Images?.Primary?.Large?.URL ?? "",
        price: offer.Price?.Money?.DisplayAmount,
        isBuyBoxWinner: offer.IsBuyBoxWinner ?? false,
        isPrimeEligible: offer.DeliveryInfo?.IsPrimeEligible ?? false,
        condition: offer.Condition?.Value ?? "",
        availabilityType: offer.Availability?.Type ?? "",
        salesRank: item.BrowseNodeInfo?.BrowseNodes?.[0]?.SalesRank,
        // build affiliateLink exactly as before
        affiliateLink: `https://www.amazon.com/dp/${item.ASIN}?tag=${settings.partnerId}`,
      };

      // 3) Save to cache
      await storage.saveProductDetails({
        asin: prod.asin,
        title: prod.title,
        description: prod.description,
        image_url: prod.imageUrl,
        price: prod.price,
        is_buy_box_winner: prod.isBuyBoxWinner,
        is_prime_eligible: prod.isPrimeEligible,
        condition: prod.condition,
        availability_type: prod.availabilityType,
        sales_rank: prod.salesRank,
      });

      // 4) Add to results
      results.push(prod);
    }

    // be nice to the API
    if (i + batchSize < uncachedAsins.length) {
      await this.sleep(1100);
    }
  }

  return results;
}

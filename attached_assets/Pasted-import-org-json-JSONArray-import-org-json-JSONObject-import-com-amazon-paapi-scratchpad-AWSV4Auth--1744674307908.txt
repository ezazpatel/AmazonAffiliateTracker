import org.json.JSONArray;
import org.json.JSONObject;
import com.amazon.paapi.scratchpad.AWSV4Auth;

public class SearchItems {

    private static final String HOST = "webservices.amazon.com";
    private static final String URI_PATH = "/paapi5/searchitems";
    private static final String ACCESS_KEY = "AKPAL6NC1S1744673101";
    private static final String SECRET_KEY = "**********";
    private static final String REGION = "us-east-1";

    public static void main(String[] args) throws Exception {

        String requestPayload =
        "{"
        +" \"Keywords\": \"security cameras\","
        +" \"Resources\": ["
        +"  \"BrowseNodeInfo.BrowseNodes\","
        +"  \"BrowseNodeInfo.BrowseNodes.Ancestor\","
        +"  \"BrowseNodeInfo.BrowseNodes.SalesRank\","
        +"  \"BrowseNodeInfo.WebsiteSalesRank\","
        +"  \"CustomerReviews.Count\","
        +"  \"CustomerReviews.StarRating\","
        +"  \"Images.Primary.Small\","
        +"  \"Images.Primary.Medium\","
        +"  \"Images.Primary.Large\","
        +"  \"Images.Primary.HighRes\","
        +"  \"Images.Variants.Small\","
        +"  \"Images.Variants.Medium\","
        +"  \"Images.Variants.Large\","
        +"  \"Images.Variants.HighRes\","
        +"  \"ItemInfo.ByLineInfo\","
        +"  \"ItemInfo.ContentInfo\","
        +"  \"ItemInfo.ContentRating\","
        +"  \"ItemInfo.Classifications\","
        +"  \"ItemInfo.ExternalIds\","
        +"  \"ItemInfo.Features\","
        +"  \"ItemInfo.ManufactureInfo\","
        +"  \"ItemInfo.ProductInfo\","
        +"  \"ItemInfo.TechnicalInfo\","
        +"  \"ItemInfo.Title\","
        +"  \"ItemInfo.TradeInInfo\","
        +"  \"Offers.Listings.Availability.MaxOrderQuantity\","
        +"  \"Offers.Listings.Availability.Message\","
        +"  \"Offers.Listings.Availability.MinOrderQuantity\","
        +"  \"Offers.Listings.Availability.Type\","
        +"  \"Offers.Listings.Condition\","
        +"  \"Offers.Listings.Condition.ConditionNote\","
        +"  \"Offers.Listings.Condition.SubCondition\","
        +"  \"Offers.Listings.DeliveryInfo.IsAmazonFulfilled\","
        +"  \"Offers.Listings.DeliveryInfo.IsFreeShippingEligible\","
        +"  \"Offers.Listings.DeliveryInfo.IsPrimeEligible\","
        +"  \"Offers.Listings.DeliveryInfo.ShippingCharges\","
        +"  \"Offers.Listings.IsBuyBoxWinner\","
        +"  \"Offers.Listings.LoyaltyPoints.Points\","
        +"  \"Offers.Listings.MerchantInfo\","
        +"  \"Offers.Listings.Price\","
        +"  \"Offers.Listings.ProgramEligibility.IsPrimeExclusive\","
        +"  \"Offers.Listings.ProgramEligibility.IsPrimePantry\","
        +"  \"Offers.Listings.Promotions\","
        +"  \"Offers.Listings.SavingBasis\","
        +"  \"Offers.Summaries.HighestPrice\","
        +"  \"Offers.Summaries.LowestPrice\","
        +"  \"Offers.Summaries.OfferCount\","
        +"  \"ParentASIN\","
        +"  \"RentalOffers.Listings.Availability.MaxOrderQuantity\","
        +"  \"RentalOffers.Listings.Availability.Message\","
        +"  \"RentalOffers.Listings.Availability.MinOrderQuantity\","
        +"  \"RentalOffers.Listings.Availability.Type\","
        +"  \"RentalOffers.Listings.BasePrice\","
        +"  \"RentalOffers.Listings.Condition\","
        +"  \"RentalOffers.Listings.Condition.ConditionNote\","
        +"  \"RentalOffers.Listings.Condition.SubCondition\","
        +"  \"RentalOffers.Listings.DeliveryInfo.IsAmazonFulfilled\","
        +"  \"RentalOffers.Listings.DeliveryInfo.IsFreeShippingEligible\","
        +"  \"RentalOffers.Listings.DeliveryInfo.IsPrimeEligible\","
        +"  \"RentalOffers.Listings.DeliveryInfo.ShippingCharges\","
        +"  \"RentalOffers.Listings.MerchantInfo\","
        +"  \"SearchRefinements\""
        +" ],"
        +" \"PartnerTag\": \"haelus01-20\","
        +" \"PartnerType\": \"Associates\","
        +" \"Marketplace\": \"www.amazon.com\""
        +"}";

        TreeMap<String, String> headers = new TreeMap<String, String>();
        headers.put("host", HOST);
        headers.put("content-type", "application/json; charset=UTF-8");
        headers.put("x-amz-target", "com.amazon.paapi5.v1.ProductAdvertisingAPIv1.SearchItems");
        headers.put("content-encoding", "amz-1.0");

        AWSV4Auth awsv4Auth =
            new AWSV4Auth.Builder(ACCESS_KEY, SECRET_KEY)
                .path(URI_PATH)
                .region(REGION)
                .service("ProductAdvertisingAPI")
                .httpMethodName("POST")
                .headers(headers)
                .payload(requestPayload)
                .build();

        HttpClient client = HttpClientBuilder.create().build();
        HttpPost httpPost = new HttpPost("https://" + HOST + URI_PATH);
        httpPost.setEntity(new StringEntity(requestPayload));
        Map<String, String> header = awsv4Auth.getHeaders();
        for (Map.Entry<String, String> entrySet : header.entrySet()) {
            httpPost.addHeader(entrySet.getKey(), entrySet.getValue());
        }

        HttpResponse response = client.execute(httpPost);
        HttpEntity entity = response.getEntity();
        String jsonResponse = EntityUtils.toString(entity, StandardCharsets.UTF_8);
        int statusCode = response.getStatusLine().getStatusCode();
        System.out.println(jsonResponse);
        if(statusCode == 200) {
            System.out.println("Successfully received response from Product Advertising API.");
            System.out.println(jsonResponse);
        } else {
            JSONObject json = new JSONObject(jsonResponse);
            if(json.has("Errors")) {
                JSONArray errorArray = json.getJSONArray("Errors");
                for(int i = 0; i < errorArray.length(); i++) {
                    JSONObject e = errorArray.getJSONObject(i);
                    System.out.println("Error Code: "+e.get("Code")+", Message: "+e.get("Message"));
                }
            } else {
                System.out.println("Error Code: InternalFailure, Message: The request processing has failed because of an unknown error, exception or failure. Please retry again.");
            }
        }
    }
}
